'''
二维的情况：

n个点
    任意n个点，存在一点至多能看到a个点，使a尽量小
    存在n个点，任意地方至少看到b个点，使b尽量大
    a >= b
求a和b？

n个点
取1个点与圆心相连构成赤道，两边还剩至多n-1 / 2个点，其中一边至多有[n-1 / 2]个点
于是，存在一点至多能看到[n-1 / 2]个点

n个点至多能覆盖n/2个圆周（开集），能将整个圆覆盖n/2次，最佳情况是均匀分配，因此“任意地方至少看到的点数”至多为[n/2]（抽屉原理）
但是，如果n是偶数，a的上界 = [n-1 / 2] = n/2 - 1 >= b，b的上界又少了1

关于a和b的下界：
构造：只需要让n个点均匀分布即可
如果n是奇数，没有一条连线过圆心，所以任意一条边：
    1、过一个点，浪费一个点，剩下两边都只能看到(n-1) / 2个点
    2、不过点，剩下一边是(n-1) / 2个点，一边是(n+1) / 2个点
    答案为[n/2]
如果n是偶数，有连线过圆心，所以任意一条边：
    1、过两个点，浪费两个点，剩下两边都只能看到(n-2) / 2个点
    2、不过点，剩下两边是n / 2个点
    答案是[n/2] - 1

总结：
如果n是奇数，a = b = (n-1) / 2
如果n是偶数，a = b = (n/2) - 1
解决了

——————————————————————————————————————————————————————————————

三维的情况：

n个点
    任意n个点，存在一点至多能看到a个点
    存在n个点，任意地方至少看到b个点，使b尽量大
    a >= b

n个点
取2个点与圆心相连构成赤道，两边还剩至多n-2 / 2个点，其中一边至多有[n-2 / 2]个点
于是，存在一点至多能看到[n-2 / 2]个点

n个点至多能覆盖n/2个球面（开集），能将整个球覆盖n/2次，最佳情况是均匀分配，因此“任意地方至少看到的点数”至多为[n/2]（抽屉原理）
但是，如果n是奇数，a的上界 = [n-2 / 2] = (n-1)/2 - 1 >= b，b又得少1
如果n是偶数，a的上界 = (n/2) - 1 >= b，b又得少1

总结：
如果n是奇数，a的上界 = b的上界 = (n-1) / 2 - 1
如果n是偶数，a的上界 = b的上界 = (n/2) - 1

但是这个上界真的能达到吗？如何在球面上构造均匀分布的N个点？
https://baijiahao.baidu.com/s?id=1765789596291727387&wfr=spider&for=pc
二维空间中有任意正多边形，但是三维空间中只有几种正多面体
在三维空间中就只有这5种正多面体，它们被称为柏拉图立体（正多面体）（platonic solids）。4、6、8、12、20
在四维中出现了第六种多面体，这是超八面立方体（octa cube ）
在五维中，只有三种正多面体。六维中，仍然只有三个；当继续增加维数时，我们还是只找到三种多面体

而且均匀可能反而不是最优解
正四面体4个顶点：三点必共面，所以上界就是只能看到一个点
正八面体6个顶点：四点共面，导致只能看到一个点
正六面体8个顶点：四点共面，导致只能看到一个点

以下是两种方法的对比
'''

import numpy as np

def get_fibonacci_2d(N):
    x = np.cos(2*np.pi * np.arange(1, N + 1) / N)
    y = np.sin(2*np.pi * np.arange(1, N + 1) / N)
    return x, y # TODO: 共线时造成误差

def get_fibonacci_3d(N):
    # 代码：https://zhuanlan.zhihu.com/p/466886154
    # 数学性质讨论：https://zhuanlan.zhihu.com/p/25988652
    # 三维球面均匀采样目前没有完全解决,一般是找近似方案

    # [0,1)x[0,1)上的斐波那契网格，也就是
    def gen_fib_lattice(N):  
        phi = (1 + np.sqrt(5)) / 2  
        x = (np.arange(1, N + 1) / phi) % 1  
        y = np.arange(1, N + 1) / N  
        return x, y

    # 斐波那契格点在平面上有均匀分布的特性，然后通过保面积变换，将其变到圆上：
    def area_preserve_rec2circ(x, y):  
        theta = 2 * np.pi * x  
        r = np.sqrt(y)  
        return theta, r

    # 最后还是通过保面积变换，将平面上的圆变换到球面
    def area_preserve_circ2sphere(theta, r):  
        phi = 2 * np.arcsin(r)  # latitude  
        x = np.cos(theta) * np.sin(phi)  
        y = np.sin(theta) * np.sin(phi)  
        z = np.cos(phi)  
        return x, y, z

    x, y = gen_fib_lattice(N) # 按照斐波那契分布
    theta, r = area_preserve_rec2circ(x, y)
    xs, ys, zs = area_preserve_circ2sphere(theta, r)
    return np.array([xs, ys, zs])

D = 3 # 空间维度
EPS = 1e-4
def y(N): # 抽屉原理考验星星的随机分布性
    T = 10000 # 重复实验T次，随机取T组点
    
    ps = np.random.randn(T,N,D) # 星星向量，随机
    signs = []
    if D == 2:
        for i in range(N):
            v = ps[:,i,:] # 赤道的TxD的平面法向量
            v = np.expand_dims(v, axis=1) # 拓展成Tx1xD的
            sign = np.sum(np.multiply(ps, v), axis=-1) # 跟剩下N-D+1颗星星计算，得到TxN个方向结果
            sign[:, i] = 0 # 在赤道上的点跳过，预防精度问题
            north = np.sum(sign > EPS, axis=-1) # 北半球（北极点能看到）的星星数
            south = np.sum(sign < -EPS, axis=-1) # 南半球（南极点能看到）的星星数
            signs.append(np.minimum(north, south))
    elif D == 3:
        for i in range(N):
            for j in range(i): # C(N,2)个星星对
                v = np.cross(ps[:,i,:], ps[:,j,:]) # 赤道的TxD的平面法向量
                for t in range(T):
                    if v[t, 0] < 0: v[t] = -v[t] # 方向统一化
                v = np.expand_dims(v, axis=1) # 拓展成Tx1xD的
                sign = np.sum(np.multiply(ps, v), axis=-1) # 跟剩下N-D+1颗星星计算，得到TxN个方向结果
                sign[:, i] = 0
                sign[:, j] = 0 # 在赤道上的点跳过，预防精度问题
                north = np.sum(sign > EPS, axis=-1) # 北半球（北极点能看到）的星星数
                south = np.sum(sign < -EPS, axis=-1) # 南半球（南极点能看到）的星星数
                signs.append(np.minimum(north, south))
        # signs: (C(N,2), T)
    else:
        raise ValueError("TODO")
        # 更高维，D维空间需要D-1个向量确定一个超平面。通过解线性方程组来确定其对应的法向量
        # A=(D-1)xD, x=D, B=0
        # 可以再给A加一行：全为1，来保证解的唯一性。然后可以用行列式来求解
        # 三维具有特殊性，可以用叉乘来求解：叉乘和行列式是统一的，而更高和更低维不存在右手定则的叉乘
        # 为什么向量积可表示为行列式？ - 天下无难课的回答 - 知乎
        # https://www.zhihu.com/question/264601293/answer/1223846067
        # 本质：叉积和行列式都是 R^3 中楔积（wedge product）的特殊形式
        # 为什么向量积可表示为行列式？ - DHYZ的回答 - 知乎
        # https://www.zhihu.com/question/264601293/answer/970408063
    
    # print("actually:", np.min(np.max(signs, axis=0)))
    # min和max写反了：
    # T次中只要有一次N颗星星很不均匀，就可以让C(N,2)个极点中的max也没有达到我们预估的上界
    # 例如N星连珠：ps = np.zeros((T,N,3))
    # ps[:,:,0] = 1
    # 然后导致min也很小
    # print("actually:", np.max(np.min(signs, axis=0)))
    return ps[np.argmax(np.min(signs, axis=0))].transpose() # 得到一种均匀分布的方案
    # TODO：这里可以改成L1范数？？？？？？？？？？？？？？？？？？？？

def verify_star(ps):
    T = 10000 # 重复实验T次，随机取T个点
    poles = np.random.randn(T,D) # 赤道的平面法向量，随机
    sign = np.dot(poles, ps) # T个方向结果
    north = np.sum(sign > EPS, axis=-1) # 北半球（北极点能看到）的星星数
    south = np.sum(sign < -EPS, axis=-1) # 南半球（南极点能看到）的星星数
    return np.min(np.minimum(north, south))

def verify_min_dis(ps):
    minn = 1e8
    maxn = -1
    for i in range(ps.shape[-1]):
        for j in range(i):
            # dis = np.sqrt(np.sum(np.multiply(ps[:, i], ps[:, j]) ** 2)) # 如果已经归一化到球上，欧氏距离和球上距离没有区别。但是这里没有归一化
            dis = np.sum(np.multiply(ps[:, i], ps[:, j])) # 点乘
            dis /= np.sqrt(np.sum(ps[:, i] ** 2))
            dis /= np.sqrt(np.sum(ps[:, j] ** 2))
            dis = np.arccos(dis) # 余弦距离
            minn = min(minn, dis) 
            maxn = max(maxn, dis)
    return minn # , maxn # 其实只关注最小距离，希望尽量大

if __name__ == '__main__':
    print("D:", D)
    for N in range(100,101):#2, 11): # 星星数量
        print("N:", N)
        print("upper bound:", int((N-D+1)/2))
        star_uniform = y(N)
        print("一个star-uniform的解:", star_uniform)
        
        # 1. 真正的均匀分布保证各个点能看到的星星数量都趋同，从这个角度来
        print("star-uniform:", verify_star(star_uniform)) 
        if D == 2:
            fibonacci = get_fibonacci_2d(N)
        elif D == 3:
            fibonacci = get_fibonacci_3d(N)
        else:
            raise ValueError("TODO")
            # 因为依赖球坐标系，fibonacci方法似乎无法推广到更高维
        print("fibonacci-uniform:", verify_star(fibonacci))

        # 2. 衡量两点之间距离的最小值，应该尽量大
        # 球面编码问题：https://zhuanlan.zhihu.com/p/19699319?from_voters_page=true
        print("star-uniform:", verify_min_dis(star_uniform))
        print("fibonacci-uniform:", verify_min_dis(fibonacci))

        # 3. 最小势能，TODO
        # https://zhuanlan.zhihu.com/p/466886154

        print("--------------------------")

'''
结论：
1) 2维时，N较小时star-uniform的效果就达不到上界，大了更明显
D: 2
N: 100
upper bound: 49
一个star-uniform的解:
[[ 0.55768595 -0.61355572  1.33472753 -2.25364927 -0.10392867 -0.97679889
  -0.27563119 -0.9947544   0.79879105 -0.67989344 -2.03362709  0.95363366
  -1.11219575 -0.24785775 -0.28429445  0.09078656 -0.17808741 -0.10842136
   1.34424814  1.02439041  1.40870761  0.021531    1.5400714   0.52489619
   0.51846297  0.22360118  1.13830049 -0.29849016 -1.10887065 -0.642296
  -1.06097415  1.09391454  0.53335202 -0.57207055  0.57190459 -1.70625826
   0.07664824 -0.30270605 -1.19818521 -1.00125385 -1.04695574 -1.87798522
   1.64818176  0.03825655  0.30785137 -0.76526515 -0.46564801 -0.28530146
  -0.65044262 -0.85666001  0.59407597  0.58351002  1.88321184 -0.65479374
   0.33190263  0.68831407  0.28335943 -0.67374446 -1.29146764  0.28554919
  -0.08743552  0.44179616 -0.7749663  -1.0458101   0.10773745 -0.7291972
  -0.49042183  1.48077626 -1.02236993 -1.58314421  0.79022838  0.01310105
  -0.21605708 -1.22194656  0.29235754 -0.76640973 -0.55518128  0.33312047
  -0.53368915 -0.1851665   0.60464083  0.067851    0.26223911  0.27529146
   1.28641838 -0.49393537 -0.25584872  0.14333108  2.23925863  1.18971804
   0.56473945  0.89387026  1.07723622  0.2611025   0.21153117  0.68440402
   0.87614744 -0.00524769  0.97372247 -0.12263313]
 [ 0.64526708  0.53574996  0.04032702  0.57915013 -0.41520379  1.02585141
  -0.26980985 -0.26558191  2.47128972 -0.05842238 -0.62343232 -1.15172765
  -0.86844573 -0.17626214 -0.28803198  0.6497481  -0.62813898  0.46691092
  -0.35788398 -0.76521309  1.08542014  0.18945767  1.12564066 -0.16752763
  -0.13922053  1.46327072  0.73590264 -0.25137352  0.54327429  0.60126013
   0.07934922  0.93188523 -0.90561286 -2.21343463  0.38619913 -1.7430722
  -0.09817302 -2.1279303   0.31975387  0.43260081 -0.48048331 -0.05610208
  -1.50608452  0.40468741 -0.08660655 -1.21174483 -0.24162201  0.10143706
   0.39165366 -0.13948629  0.51282538 -0.28922222  2.27634102  0.86030759
   0.09351345  1.01425132 -1.40453182 -0.35430119  1.32075263  0.04327186
  -1.33975141 -0.41201587 -1.30483686  0.09837558 -1.71993389 -0.13526672
   1.3890694  -0.43547939 -0.60344482 -1.35872808  0.65766877 -0.33036651
   0.34789856  2.08823545 -0.88435635 -0.25013354  0.49381007  0.10537859
  -0.62832066 -1.8844789  -0.18636929 -0.49505193  0.1242861   0.75141435
   0.46420815  1.58591321  0.32389704 -3.0141078  -0.21351499  0.81201056
  -0.61772768 -2.54294438  0.39872968  2.1731362   0.37363466 -0.07662765
  -0.56851882  0.30904281  1.60053409  1.33160122]]
star-uniform: 45
real-uniform: 49

2) 3维时，N较小时star-uniform的效果稍好
D: 3
N: 9
upper bound: 3
一个star-uniform的解:
[[ 1.97368805  0.89425234 -1.55958945  1.12805036  0.28351953 -1.01069361
   1.09026633 -1.16548538 -0.58929908]
 [ 1.21622787 -1.7849483  -0.86465868  0.69273744  1.67892003 -0.74525071
  -1.01912398 -0.39514696 -1.09956862]
 [-0.53226335  0.69119634  0.22954907  0.23213979 -0.43062984 -0.71655316
  -0.73601563  0.50603837  1.34329184]]
star-uniform: 3
fibonacci-uniform: 2

3) 3维时，N较大时star-uniform没有fibonacci-uniform的效果好，而且耗时很长
例子：
D: 3
N: 100
upper bound: 49
[[-1.68870593 -0.22465669 -0.14838841 -1.17650337  0.56959395 -0.47423992
  -1.23460385 -1.07862293 -2.25255276 -2.57136173 -0.7387042  -0.76434433
  -0.69695182  2.84410416  1.07865588  0.04598023  0.44029803  1.14643692
   0.72879583  0.31004264 -1.43666473  0.03521626  0.57077463 -0.54831654
   0.37242452  0.04840848 -0.04782243  0.38395145  0.68045018  0.6870584
  -0.78677729  1.84359608  2.8111144   0.8490962  -0.44571921 -1.05489865
  -0.88582201 -0.23010932  0.08943931 -0.52342457  0.20270785 -0.72001652
  -1.32912598  1.23499304  0.11076419 -0.45650406  0.18741708 -2.06697299
   0.60968338  0.90136067  0.3994352   0.06061514  0.08261146 -0.14401019
  -0.61984572 -1.02289839 -0.90843878  0.10394799 -1.37704176  1.66493223
   0.07990742 -0.59711457 -0.05378064  0.71186647  0.12537997  0.95288976
   0.89707664  0.17880932  0.58082576  0.17658203 -0.37971481  1.44505411
   0.14684824  0.32182607 -1.34184415 -0.2469482  -1.17086778 -1.05720953
   0.2757812   1.5305153   1.11788803  0.46634363  0.32996328  1.92235285
  -0.57779289  0.33669581  0.97955964  0.2966894   1.72214973  1.62454632
  -1.04956149 -0.91600422 -0.39891333 -0.8708234  -0.13354331 -2.31031505
  -1.14268395  0.29656388  0.16541475 -0.4488359 ]
 [-0.89671437 -0.04078958 -1.04604921 -0.46507203  0.91188585  0.19468316
  -1.68651426 -1.35000223 -0.23927985 -0.15148707 -1.4702283   2.16837625
   0.25535391 -0.07740978  0.15467946  0.26236348 -0.03856451  1.72658663
  -0.97092233 -0.38940209 -1.00509048 -1.34858691 -1.3635291  -0.67323885
   0.83376729 -0.16785329  0.30041611 -0.09485477 -2.11162507 -0.5383663
  -1.19932293 -0.38647569 -0.71816161 -0.34263843 -1.62580332  0.15474789
   0.84058636 -0.30796948 -0.74038193 -0.37505145 -0.52176211  2.24521197
   0.31789323  0.92845001  1.5471734   0.61742778  0.48224497 -1.04551225
   0.20122499 -1.27783422  0.35126321  0.5623496  -0.70476797 -0.46946241
   0.15405864  0.99465048  1.72341399  2.65659491 -0.02879673  1.08823483
  -0.75464217  0.26160476  0.26766956  0.73384166  0.85966105  0.31026201
   1.21815202  1.0223045  -1.0298613   0.9436221   0.4227313  -1.12523826
   1.01560823 -0.19763846 -1.0661294  -0.90095473  0.19900682 -0.36301213
  -0.35987262  0.31722873  0.45742171  0.40897846  0.60406174 -1.64368969
   1.74950922  0.59691202  0.82128587  0.049095   -0.79364988 -2.50773197
  -1.78583738  1.83061942 -0.32803273  0.50985513 -0.48429026 -1.40748974
   0.48970933 -0.25212139  0.10546174 -0.90448361]
 [ 0.0386951  -0.15656426  0.81598317 -1.47641797  0.76023702  0.24387645
  -1.99918387 -0.27379992  0.66220644  1.58576871 -0.66109802 -0.79710936
   0.14629601  0.47237097 -0.30009714  0.30144647  0.55789361  2.57940592
   0.49333757  1.01279456  0.71745665  0.07215899  1.44939706 -1.70159501
   0.28716461 -2.31185332 -3.07098269  0.09503188  3.05854896  0.55059297
  -0.44573657  1.70548387 -0.49443775  0.37257079 -0.28359576 -1.49939414
  -0.22715784  0.18461905 -1.07845214  0.69361767 -0.1880122  -1.99219163
  -0.81166758  3.68577021 -0.73340646  1.21627144 -0.17480645 -1.61791672
  -0.17511122 -0.76010351 -0.76168238  1.60334566 -2.15316546 -1.47068135
   0.27224363 -1.20218322 -1.87112719  0.85086638 -0.23768274 -0.67289978
  -1.01495401 -1.49898937 -0.08234221  0.69045547 -0.59182299  1.6931516
  -0.29400345  0.11351977 -0.08395053 -0.05633795  0.17465965 -1.07770932
   1.0820751  -0.41463287  1.46404746  2.12040801 -0.60320745 -1.05484865
   1.51438817 -0.06048557  0.84098496  0.55319635 -0.79389497 -0.20880306
  -0.34089603 -0.33840182 -0.71178858  0.2992491  -1.08119008  2.8382972
   0.24936935  0.56003422 -0.35311656 -0.06477938  0.32132362 -0.25521522
  -0.71313795  0.24940674 -1.18737168  1.75798863]]
star-uniform: 44
fibonacci-uniform: 46
'''